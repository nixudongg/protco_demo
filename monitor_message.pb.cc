// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monitor_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CommandHeadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommandHead> {
} _CommandHead_default_instance_;
class DeviceInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo> {
} _DeviceInfo_default_instance_;
class CurrentResourceUsageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CurrentResourceUsage> {
} _CurrentResourceUsage_default_instance_;
class ScadaServiceStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScadaServiceStatus> {
} _ScadaServiceStatus_default_instance_;
class ScadaVersionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScadaVersion> {
} _ScadaVersion_default_instance_;
class SyncFileInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncFileInfo> {
} _SyncFileInfo_default_instance_;
class SyncFileInfoListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncFileInfoList> {
} _SyncFileInfoList_default_instance_;

namespace protobuf_monitor_5fmessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHead, cmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHead, cmdlength_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, hardware_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, nodename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, memorysize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, harddisksize_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentResourceUsage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentResourceUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentResourceUsage, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentResourceUsage, cpuusagerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentResourceUsage, memoryusagerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentResourceUsage, harddiskusagerate_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaServiceStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaServiceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaServiceStatus, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaServiceStatus, scadaserversstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaServiceStatus, checktimeserverstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaServiceStatus, filedlsvrstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaServiceStatus, filedlproxystatus_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaVersion, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaVersion, scadaplatformver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaVersion, scadaappver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaVersion, buildver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadaVersion, downloadver_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFileInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFileInfo, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFileInfo, targetpath_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFileInfoList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFileInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFileInfoList, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFileInfoList, synclist_),
  0,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CommandHead)},
  { 8, 20, sizeof(DeviceInfo)},
  { 28, 36, sizeof(CurrentResourceUsage)},
  { 40, 49, sizeof(ScadaServiceStatus)},
  { 54, 63, sizeof(ScadaVersion)},
  { 68, 74, sizeof(SyncFileInfo)},
  { 76, 82, sizeof(SyncFileInfoList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommandHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CurrentResourceUsage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScadaServiceStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScadaVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncFileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncFileInfoList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "monitor_message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _CommandHead_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DeviceInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CurrentResourceUsage_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ScadaServiceStatus_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ScadaVersion_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SyncFileInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SyncFileInfoList_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CommandHead_default_instance_.DefaultConstruct();
  _DeviceInfo_default_instance_.DefaultConstruct();
  _CurrentResourceUsage_default_instance_.DefaultConstruct();
  _ScadaServiceStatus_default_instance_.DefaultConstruct();
  _ScadaVersion_default_instance_.DefaultConstruct();
  _SyncFileInfo_default_instance_.DefaultConstruct();
  _SyncFileInfoList_default_instance_.DefaultConstruct();
  _DeviceInfo_default_instance_.get_mutable()->head_ = const_cast< ::CommandHead*>(
      ::CommandHead::internal_default_instance());
  _CurrentResourceUsage_default_instance_.get_mutable()->head_ = const_cast< ::CommandHead*>(
      ::CommandHead::internal_default_instance());
  _ScadaServiceStatus_default_instance_.get_mutable()->head_ = const_cast< ::CommandHead*>(
      ::CommandHead::internal_default_instance());
  _ScadaVersion_default_instance_.get_mutable()->head_ = const_cast< ::CommandHead*>(
      ::CommandHead::internal_default_instance());
  _SyncFileInfoList_default_instance_.get_mutable()->head_ = const_cast< ::CommandHead*>(
      ::CommandHead::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025monitor_message.proto\"/\n\013CommandHead\022\r"
      "\n\005cmdId\030\001 \002(\r\022\021\n\tcmdLength\030\002 \002(\r\"\251\001\n\nDev"
      "iceInfo\022\032\n\004head\030\001 \002(\0132\014.CommandHead\022\020\n\010h"
      "ostName\030\002 \002(\t\022\016\n\006system\030\003 \002(\t\022\020\n\010hardwar"
      "e\030\004 \002(\t\022\020\n\010nodeName\030\005 \002(\t\022\017\n\007version\030\006 \002"
      "(\t\022\022\n\nmemorySize\030\007 \002(\t\022\024\n\014harddiskSize\030\010"
      " \002(\t\"|\n\024CurrentResourceUsage\022\032\n\004head\030\001 \002"
      "(\0132\014.CommandHead\022\024\n\014cpuUsageRate\030\002 \002(\002\022\027"
      "\n\017memoryUsageRate\030\003 \002(\002\022\031\n\021harddiskUsage"
      "Rate\030\004 \002(\002\"\337\001\n\022ScadaServiceStatus\022\032\n\004hea"
      "d\030\001 \002(\0132\014.CommandHead\022*\n\022ScadaServersSta"
      "tus\030\002 \002(\0162\016.ServiceStatus\022-\n\025CheckTimeSe"
      "rverStatus\030\003 \002(\0162\016.ServiceStatus\022\'\n\017File"
      "DLSvrStatus\030\004 \002(\0162\016.ServiceStatus\022)\n\021Fil"
      "eDLProxyStatus\030\005 \002(\0162\016.ServiceStatus\"\200\001\n"
      "\014ScadaVersion\022\032\n\004head\030\001 \002(\0132\014.CommandHea"
      "d\022\030\n\020ScadaPlatformVer\030\002 \002(\t\022\023\n\013ScadaAppV"
      "er\030\003 \002(\t\022\020\n\010BuildVer\030\004 \002(\t\022\023\n\013DownloadVe"
      "r\030\005 \002(\t\"4\n\014SyncFileInfo\022\020\n\010FileName\030\001 \002("
      "\t\022\022\n\nTargetPath\030\002 \002(\t\"O\n\020SyncFileInfoLis"
      "t\022\032\n\004head\030\001 \002(\0132\014.CommandHead\022\037\n\010syncLis"
      "t\030\002 \003(\0132\r.SyncFileInfo**\n\rServiceStatus\022"
      "\014\n\010STOPPING\020\000\022\013\n\007RUNNING\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 906);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "monitor_message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_monitor_5fmessage_2eproto

const ::google::protobuf::EnumDescriptor* ServiceStatus_descriptor() {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_enum_descriptors[0];
}
bool ServiceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandHead::kCmdIdFieldNumber;
const int CommandHead::kCmdLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandHead::CommandHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monitor_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommandHead)
}
CommandHead::CommandHead(const CommandHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmdid_, &from.cmdid_,
    reinterpret_cast<char*>(&cmdlength_) -
    reinterpret_cast<char*>(&cmdid_) + sizeof(cmdlength_));
  // @@protoc_insertion_point(copy_constructor:CommandHead)
}

void CommandHead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cmdid_, 0, reinterpret_cast<char*>(&cmdlength_) -
    reinterpret_cast<char*>(&cmdid_) + sizeof(cmdlength_));
}

CommandHead::~CommandHead() {
  // @@protoc_insertion_point(destructor:CommandHead)
  SharedDtor();
}

void CommandHead::SharedDtor() {
}

void CommandHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandHead::descriptor() {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[0].descriptor;
}

const CommandHead& CommandHead::default_instance() {
  protobuf_monitor_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommandHead* CommandHead::New(::google::protobuf::Arena* arena) const {
  CommandHead* n = new CommandHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandHead::Clear() {
// @@protoc_insertion_point(message_clear_start:CommandHead)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&cmdid_, 0, reinterpret_cast<char*>(&cmdlength_) -
      reinterpret_cast<char*>(&cmdid_) + sizeof(cmdlength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommandHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommandHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmdId = 1;
      case 1: {
        if (tag == 8u) {
          set_has_cmdid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 cmdLength = 2;
      case 2: {
        if (tag == 16u) {
          set_has_cmdlength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CommandHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommandHead)
  return false;
#undef DO_
}

void CommandHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommandHead)
  // required uint32 cmdId = 1;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmdid(), output);
  }

  // required uint32 cmdLength = 2;
  if (has_cmdlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmdlength(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CommandHead)
}

::google::protobuf::uint8* CommandHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CommandHead)
  // required uint32 cmdId = 1;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmdid(), target);
  }

  // required uint32 cmdLength = 2;
  if (has_cmdlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmdlength(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommandHead)
  return target;
}

size_t CommandHead::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommandHead)
  size_t total_size = 0;

  if (has_cmdid()) {
    // required uint32 cmdId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdid());
  }

  if (has_cmdlength()) {
    // required uint32 cmdLength = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdlength());
  }

  return total_size;
}
size_t CommandHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommandHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 cmdId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdid());

    // required uint32 cmdLength = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdlength());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommandHead)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommandHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommandHead)
    MergeFrom(*source);
  }
}

void CommandHead::MergeFrom(const CommandHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommandHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_cmdlength()) {
      set_cmdlength(from.cmdlength());
    }
  }
}

void CommandHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommandHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandHead::CopyFrom(const CommandHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommandHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CommandHead::Swap(CommandHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandHead::InternalSwap(CommandHead* other) {
  std::swap(cmdid_, other->cmdid_);
  std::swap(cmdlength_, other->cmdlength_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandHead::GetMetadata() const {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandHead

// required uint32 cmdId = 1;
bool CommandHead::has_cmdid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommandHead::set_has_cmdid() {
  _has_bits_[0] |= 0x00000001u;
}
void CommandHead::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommandHead::clear_cmdid() {
  cmdid_ = 0u;
  clear_has_cmdid();
}
::google::protobuf::uint32 CommandHead::cmdid() const {
  // @@protoc_insertion_point(field_get:CommandHead.cmdId)
  return cmdid_;
}
void CommandHead::set_cmdid(::google::protobuf::uint32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:CommandHead.cmdId)
}

// required uint32 cmdLength = 2;
bool CommandHead::has_cmdlength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommandHead::set_has_cmdlength() {
  _has_bits_[0] |= 0x00000002u;
}
void CommandHead::clear_has_cmdlength() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommandHead::clear_cmdlength() {
  cmdlength_ = 0u;
  clear_has_cmdlength();
}
::google::protobuf::uint32 CommandHead::cmdlength() const {
  // @@protoc_insertion_point(field_get:CommandHead.cmdLength)
  return cmdlength_;
}
void CommandHead::set_cmdlength(::google::protobuf::uint32 value) {
  set_has_cmdlength();
  cmdlength_ = value;
  // @@protoc_insertion_point(field_set:CommandHead.cmdLength)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kHeadFieldNumber;
const int DeviceInfo::kHostNameFieldNumber;
const int DeviceInfo::kSystemFieldNumber;
const int DeviceInfo::kHardwareFieldNumber;
const int DeviceInfo::kNodeNameFieldNumber;
const int DeviceInfo::kVersionFieldNumber;
const int DeviceInfo::kMemorySizeFieldNumber;
const int DeviceInfo::kHarddiskSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monitor_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_system()) {
    system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  hardware_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hardware()) {
    hardware_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_);
  }
  nodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nodename()) {
    nodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodename_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  memorysize_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_memorysize()) {
    memorysize_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memorysize_);
  }
  harddisksize_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_harddisksize()) {
    harddisksize_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.harddisksize_);
  }
  if (from.has_head()) {
    head_ = new ::CommandHead(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memorysize_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  harddisksize_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nodename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memorysize_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  harddisksize_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[1].descriptor;
}

const DeviceInfo& DeviceInfo::default_instance() {
  protobuf_monitor_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceInfo* DeviceInfo::New(::google::protobuf::Arena* arena) const {
  DeviceInfo* n = new DeviceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceInfo)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_hostname()) {
      GOOGLE_DCHECK(!hostname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hostname_.UnsafeRawStringPointer())->clear();
    }
    if (has_system()) {
      GOOGLE_DCHECK(!system_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*system_.UnsafeRawStringPointer())->clear();
    }
    if (has_hardware()) {
      GOOGLE_DCHECK(!hardware_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hardware_.UnsafeRawStringPointer())->clear();
    }
    if (has_nodename()) {
      GOOGLE_DCHECK(!nodename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nodename_.UnsafeRawStringPointer())->clear();
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
    if (has_memorysize()) {
      GOOGLE_DCHECK(!memorysize_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*memorysize_.UnsafeRawStringPointer())->clear();
    }
    if (has_harddisksize()) {
      GOOGLE_DCHECK(!harddisksize_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*harddisksize_.UnsafeRawStringPointer())->clear();
    }
    if (has_head()) {
      GOOGLE_DCHECK(head_ != NULL);
      head_->::CommandHead::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommandHead head = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hostName = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceInfo.hostName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string system = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->system().data(), this->system().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceInfo.system");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hardware = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware().data(), this->hardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceInfo.hardware");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nodeName = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodename().data(), this->nodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceInfo.nodeName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string version = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceInfo.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string memorySize = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memorysize()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->memorysize().data(), this->memorysize().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceInfo.memorySize");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string harddiskSize = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_harddisksize()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->harddisksize().data(), this->harddisksize().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceInfo.harddiskSize");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceInfo)
  // required .CommandHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // required string hostName = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.hostName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // required string system = 3;
  if (has_system()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system().data(), this->system().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->system(), output);
  }

  // required string hardware = 4;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.hardware");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hardware(), output);
  }

  // required string nodeName = 5;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.nodeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nodename(), output);
  }

  // required string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // required string memorySize = 7;
  if (has_memorysize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memorysize().data(), this->memorysize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.memorySize");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->memorysize(), output);
  }

  // required string harddiskSize = 8;
  if (has_harddisksize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->harddisksize().data(), this->harddisksize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.harddiskSize");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->harddisksize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeviceInfo)
  // required .CommandHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // required string hostName = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.hostName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // required string system = 3;
  if (has_system()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system().data(), this->system().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.system");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->system(), target);
  }

  // required string hardware = 4;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware().data(), this->hardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.hardware");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hardware(), target);
  }

  // required string nodeName = 5;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.nodeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nodename(), target);
  }

  // required string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // required string memorySize = 7;
  if (has_memorysize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memorysize().data(), this->memorysize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.memorySize");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->memorysize(), target);
  }

  // required string harddiskSize = 8;
  if (has_harddisksize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->harddisksize().data(), this->harddisksize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfo.harddiskSize");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->harddisksize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceInfo)
  return target;
}

size_t DeviceInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DeviceInfo)
  size_t total_size = 0;

  if (has_hostname()) {
    // required string hostName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  if (has_system()) {
    // required string system = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system());
  }

  if (has_hardware()) {
    // required string hardware = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hardware());
  }

  if (has_nodename()) {
    // required string nodeName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodename());
  }

  if (has_version()) {
    // required string version = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  if (has_memorysize()) {
    // required string memorySize = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->memorysize());
  }

  if (has_harddisksize()) {
    // required string harddiskSize = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->harddisksize());
  }

  if (has_head()) {
    // required .CommandHead head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  return total_size;
}
size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string hostName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());

    // required string system = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system());

    // required string hardware = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hardware());

    // required string nodeName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodename());

    // required string version = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());

    // required string memorySize = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->memorysize());

    // required string harddiskSize = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->harddisksize());

    // required .CommandHead head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_hostname()) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (from.has_system()) {
      set_has_system();
      system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_);
    }
    if (from.has_hardware()) {
      set_has_hardware();
      hardware_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_);
    }
    if (from.has_nodename()) {
      set_has_nodename();
      nodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodename_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_memorysize()) {
      set_has_memorysize();
      memorysize_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memorysize_);
    }
    if (from.has_harddisksize()) {
      set_has_harddisksize();
      harddisksize_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.harddisksize_);
    }
    if (from.has_head()) {
      mutable_head()->::CommandHead::MergeFrom(from.head());
    }
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  hostname_.Swap(&other->hostname_);
  system_.Swap(&other->system_);
  hardware_.Swap(&other->hardware_);
  nodename_.Swap(&other->nodename_);
  version_.Swap(&other->version_);
  memorysize_.Swap(&other->memorysize_);
  harddisksize_.Swap(&other->harddisksize_);
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfo

// required .CommandHead head = 1;
bool DeviceInfo::has_head() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceInfo::set_has_head() {
  _has_bits_[0] |= 0x00000080u;
}
void DeviceInfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000080u;
}
void DeviceInfo::clear_head() {
  if (head_ != NULL) head_->::CommandHead::Clear();
  clear_has_head();
}
const ::CommandHead& DeviceInfo::head() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.head)
  return head_ != NULL ? *head_
                         : *::CommandHead::internal_default_instance();
}
::CommandHead* DeviceInfo::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::CommandHead;
  }
  // @@protoc_insertion_point(field_mutable:DeviceInfo.head)
  return head_;
}
::CommandHead* DeviceInfo::release_head() {
  // @@protoc_insertion_point(field_release:DeviceInfo.head)
  clear_has_head();
  ::CommandHead* temp = head_;
  head_ = NULL;
  return temp;
}
void DeviceInfo::set_allocated_head(::CommandHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.head)
}

// required string hostName = 2;
bool DeviceInfo::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceInfo::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceInfo::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceInfo::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
const ::std::string& DeviceInfo::hostname() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.hostName)
  return hostname_.GetNoArena();
}
void DeviceInfo::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfo.hostName)
}
#if LANG_CXX11
void DeviceInfo::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfo.hostName)
}
#endif
void DeviceInfo::set_hostname(const char* value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfo.hostName)
}
void DeviceInfo::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfo.hostName)
}
::std::string* DeviceInfo::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.hostName)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:DeviceInfo.hostName)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.hostName)
}

// required string system = 3;
bool DeviceInfo::has_system() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceInfo::set_has_system() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceInfo::clear_has_system() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceInfo::clear_system() {
  system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system();
}
const ::std::string& DeviceInfo::system() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.system)
  return system_.GetNoArena();
}
void DeviceInfo::set_system(const ::std::string& value) {
  set_has_system();
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfo.system)
}
#if LANG_CXX11
void DeviceInfo::set_system(::std::string&& value) {
  set_has_system();
  system_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfo.system)
}
#endif
void DeviceInfo::set_system(const char* value) {
  set_has_system();
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfo.system)
}
void DeviceInfo::set_system(const char* value, size_t size) {
  set_has_system();
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfo.system)
}
::std::string* DeviceInfo::mutable_system() {
  set_has_system();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.system)
  return system_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_system() {
  // @@protoc_insertion_point(field_release:DeviceInfo.system)
  clear_has_system();
  return system_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_system(::std::string* system) {
  if (system != NULL) {
    set_has_system();
  } else {
    clear_has_system();
  }
  system_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.system)
}

// required string hardware = 4;
bool DeviceInfo::has_hardware() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceInfo::set_has_hardware() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceInfo::clear_has_hardware() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceInfo::clear_hardware() {
  hardware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardware();
}
const ::std::string& DeviceInfo::hardware() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.hardware)
  return hardware_.GetNoArena();
}
void DeviceInfo::set_hardware(const ::std::string& value) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfo.hardware)
}
#if LANG_CXX11
void DeviceInfo::set_hardware(::std::string&& value) {
  set_has_hardware();
  hardware_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfo.hardware)
}
#endif
void DeviceInfo::set_hardware(const char* value) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfo.hardware)
}
void DeviceInfo::set_hardware(const char* value, size_t size) {
  set_has_hardware();
  hardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfo.hardware)
}
::std::string* DeviceInfo::mutable_hardware() {
  set_has_hardware();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.hardware)
  return hardware_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_hardware() {
  // @@protoc_insertion_point(field_release:DeviceInfo.hardware)
  clear_has_hardware();
  return hardware_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_hardware(::std::string* hardware) {
  if (hardware != NULL) {
    set_has_hardware();
  } else {
    clear_has_hardware();
  }
  hardware_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardware);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.hardware)
}

// required string nodeName = 5;
bool DeviceInfo::has_nodename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceInfo::set_has_nodename() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceInfo::clear_has_nodename() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceInfo::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nodename();
}
const ::std::string& DeviceInfo::nodename() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.nodeName)
  return nodename_.GetNoArena();
}
void DeviceInfo::set_nodename(const ::std::string& value) {
  set_has_nodename();
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfo.nodeName)
}
#if LANG_CXX11
void DeviceInfo::set_nodename(::std::string&& value) {
  set_has_nodename();
  nodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfo.nodeName)
}
#endif
void DeviceInfo::set_nodename(const char* value) {
  set_has_nodename();
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfo.nodeName)
}
void DeviceInfo::set_nodename(const char* value, size_t size) {
  set_has_nodename();
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfo.nodeName)
}
::std::string* DeviceInfo::mutable_nodename() {
  set_has_nodename();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_nodename() {
  // @@protoc_insertion_point(field_release:DeviceInfo.nodeName)
  clear_has_nodename();
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    set_has_nodename();
  } else {
    clear_has_nodename();
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.nodeName)
}

// required string version = 6;
bool DeviceInfo::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceInfo::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
void DeviceInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeviceInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& DeviceInfo::version() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.version)
  return version_.GetNoArena();
}
void DeviceInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfo.version)
}
#if LANG_CXX11
void DeviceInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfo.version)
}
#endif
void DeviceInfo::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfo.version)
}
void DeviceInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfo.version)
}
::std::string* DeviceInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_version() {
  // @@protoc_insertion_point(field_release:DeviceInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.version)
}

// required string memorySize = 7;
bool DeviceInfo::has_memorysize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceInfo::set_has_memorysize() {
  _has_bits_[0] |= 0x00000020u;
}
void DeviceInfo::clear_has_memorysize() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeviceInfo::clear_memorysize() {
  memorysize_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memorysize();
}
const ::std::string& DeviceInfo::memorysize() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.memorySize)
  return memorysize_.GetNoArena();
}
void DeviceInfo::set_memorysize(const ::std::string& value) {
  set_has_memorysize();
  memorysize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfo.memorySize)
}
#if LANG_CXX11
void DeviceInfo::set_memorysize(::std::string&& value) {
  set_has_memorysize();
  memorysize_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfo.memorySize)
}
#endif
void DeviceInfo::set_memorysize(const char* value) {
  set_has_memorysize();
  memorysize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfo.memorySize)
}
void DeviceInfo::set_memorysize(const char* value, size_t size) {
  set_has_memorysize();
  memorysize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfo.memorySize)
}
::std::string* DeviceInfo::mutable_memorysize() {
  set_has_memorysize();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.memorySize)
  return memorysize_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_memorysize() {
  // @@protoc_insertion_point(field_release:DeviceInfo.memorySize)
  clear_has_memorysize();
  return memorysize_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_memorysize(::std::string* memorysize) {
  if (memorysize != NULL) {
    set_has_memorysize();
  } else {
    clear_has_memorysize();
  }
  memorysize_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memorysize);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.memorySize)
}

// required string harddiskSize = 8;
bool DeviceInfo::has_harddisksize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceInfo::set_has_harddisksize() {
  _has_bits_[0] |= 0x00000040u;
}
void DeviceInfo::clear_has_harddisksize() {
  _has_bits_[0] &= ~0x00000040u;
}
void DeviceInfo::clear_harddisksize() {
  harddisksize_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_harddisksize();
}
const ::std::string& DeviceInfo::harddisksize() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.harddiskSize)
  return harddisksize_.GetNoArena();
}
void DeviceInfo::set_harddisksize(const ::std::string& value) {
  set_has_harddisksize();
  harddisksize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfo.harddiskSize)
}
#if LANG_CXX11
void DeviceInfo::set_harddisksize(::std::string&& value) {
  set_has_harddisksize();
  harddisksize_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfo.harddiskSize)
}
#endif
void DeviceInfo::set_harddisksize(const char* value) {
  set_has_harddisksize();
  harddisksize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfo.harddiskSize)
}
void DeviceInfo::set_harddisksize(const char* value, size_t size) {
  set_has_harddisksize();
  harddisksize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfo.harddiskSize)
}
::std::string* DeviceInfo::mutable_harddisksize() {
  set_has_harddisksize();
  // @@protoc_insertion_point(field_mutable:DeviceInfo.harddiskSize)
  return harddisksize_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_harddisksize() {
  // @@protoc_insertion_point(field_release:DeviceInfo.harddiskSize)
  clear_has_harddisksize();
  return harddisksize_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_harddisksize(::std::string* harddisksize) {
  if (harddisksize != NULL) {
    set_has_harddisksize();
  } else {
    clear_has_harddisksize();
  }
  harddisksize_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), harddisksize);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.harddiskSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentResourceUsage::kHeadFieldNumber;
const int CurrentResourceUsage::kCpuUsageRateFieldNumber;
const int CurrentResourceUsage::kMemoryUsageRateFieldNumber;
const int CurrentResourceUsage::kHarddiskUsageRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentResourceUsage::CurrentResourceUsage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monitor_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CurrentResourceUsage)
}
CurrentResourceUsage::CurrentResourceUsage(const CurrentResourceUsage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::CommandHead(*from.head_);
  } else {
    head_ = NULL;
  }
  ::memcpy(&cpuusagerate_, &from.cpuusagerate_,
    reinterpret_cast<char*>(&harddiskusagerate_) -
    reinterpret_cast<char*>(&cpuusagerate_) + sizeof(harddiskusagerate_));
  // @@protoc_insertion_point(copy_constructor:CurrentResourceUsage)
}

void CurrentResourceUsage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&head_, 0, reinterpret_cast<char*>(&harddiskusagerate_) -
    reinterpret_cast<char*>(&head_) + sizeof(harddiskusagerate_));
}

CurrentResourceUsage::~CurrentResourceUsage() {
  // @@protoc_insertion_point(destructor:CurrentResourceUsage)
  SharedDtor();
}

void CurrentResourceUsage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void CurrentResourceUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentResourceUsage::descriptor() {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[2].descriptor;
}

const CurrentResourceUsage& CurrentResourceUsage::default_instance() {
  protobuf_monitor_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CurrentResourceUsage* CurrentResourceUsage::New(::google::protobuf::Arena* arena) const {
  CurrentResourceUsage* n = new CurrentResourceUsage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurrentResourceUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:CurrentResourceUsage)
  if (has_head()) {
    GOOGLE_DCHECK(head_ != NULL);
    head_->::CommandHead::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&cpuusagerate_, 0, reinterpret_cast<char*>(&harddiskusagerate_) -
      reinterpret_cast<char*>(&cpuusagerate_) + sizeof(harddiskusagerate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurrentResourceUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CurrentResourceUsage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommandHead head = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float cpuUsageRate = 2;
      case 2: {
        if (tag == 21u) {
          set_has_cpuusagerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpuusagerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float memoryUsageRate = 3;
      case 3: {
        if (tag == 29u) {
          set_has_memoryusagerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &memoryusagerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float harddiskUsageRate = 4;
      case 4: {
        if (tag == 37u) {
          set_has_harddiskusagerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &harddiskusagerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CurrentResourceUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CurrentResourceUsage)
  return false;
#undef DO_
}

void CurrentResourceUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CurrentResourceUsage)
  // required .CommandHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // required float cpuUsageRate = 2;
  if (has_cpuusagerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cpuusagerate(), output);
  }

  // required float memoryUsageRate = 3;
  if (has_memoryusagerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->memoryusagerate(), output);
  }

  // required float harddiskUsageRate = 4;
  if (has_harddiskusagerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->harddiskusagerate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CurrentResourceUsage)
}

::google::protobuf::uint8* CurrentResourceUsage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CurrentResourceUsage)
  // required .CommandHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // required float cpuUsageRate = 2;
  if (has_cpuusagerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cpuusagerate(), target);
  }

  // required float memoryUsageRate = 3;
  if (has_memoryusagerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->memoryusagerate(), target);
  }

  // required float harddiskUsageRate = 4;
  if (has_harddiskusagerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->harddiskusagerate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CurrentResourceUsage)
  return target;
}

size_t CurrentResourceUsage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CurrentResourceUsage)
  size_t total_size = 0;

  if (has_head()) {
    // required .CommandHead head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_cpuusagerate()) {
    // required float cpuUsageRate = 2;
    total_size += 1 + 4;
  }

  if (has_memoryusagerate()) {
    // required float memoryUsageRate = 3;
    total_size += 1 + 4;
  }

  if (has_harddiskusagerate()) {
    // required float harddiskUsageRate = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CurrentResourceUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CurrentResourceUsage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .CommandHead head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required float cpuUsageRate = 2;
    total_size += 1 + 4;

    // required float memoryUsageRate = 3;
    total_size += 1 + 4;

    // required float harddiskUsageRate = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentResourceUsage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CurrentResourceUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentResourceUsage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrentResourceUsage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CurrentResourceUsage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CurrentResourceUsage)
    MergeFrom(*source);
  }
}

void CurrentResourceUsage::MergeFrom(const CurrentResourceUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CurrentResourceUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_head()) {
      mutable_head()->::CommandHead::MergeFrom(from.head());
    }
    if (from.has_cpuusagerate()) {
      set_cpuusagerate(from.cpuusagerate());
    }
    if (from.has_memoryusagerate()) {
      set_memoryusagerate(from.memoryusagerate());
    }
    if (from.has_harddiskusagerate()) {
      set_harddiskusagerate(from.harddiskusagerate());
    }
  }
}

void CurrentResourceUsage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CurrentResourceUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentResourceUsage::CopyFrom(const CurrentResourceUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CurrentResourceUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentResourceUsage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void CurrentResourceUsage::Swap(CurrentResourceUsage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentResourceUsage::InternalSwap(CurrentResourceUsage* other) {
  std::swap(head_, other->head_);
  std::swap(cpuusagerate_, other->cpuusagerate_);
  std::swap(memoryusagerate_, other->memoryusagerate_);
  std::swap(harddiskusagerate_, other->harddiskusagerate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrentResourceUsage::GetMetadata() const {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurrentResourceUsage

// required .CommandHead head = 1;
bool CurrentResourceUsage::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CurrentResourceUsage::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void CurrentResourceUsage::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void CurrentResourceUsage::clear_head() {
  if (head_ != NULL) head_->::CommandHead::Clear();
  clear_has_head();
}
const ::CommandHead& CurrentResourceUsage::head() const {
  // @@protoc_insertion_point(field_get:CurrentResourceUsage.head)
  return head_ != NULL ? *head_
                         : *::CommandHead::internal_default_instance();
}
::CommandHead* CurrentResourceUsage::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::CommandHead;
  }
  // @@protoc_insertion_point(field_mutable:CurrentResourceUsage.head)
  return head_;
}
::CommandHead* CurrentResourceUsage::release_head() {
  // @@protoc_insertion_point(field_release:CurrentResourceUsage.head)
  clear_has_head();
  ::CommandHead* temp = head_;
  head_ = NULL;
  return temp;
}
void CurrentResourceUsage::set_allocated_head(::CommandHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:CurrentResourceUsage.head)
}

// required float cpuUsageRate = 2;
bool CurrentResourceUsage::has_cpuusagerate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CurrentResourceUsage::set_has_cpuusagerate() {
  _has_bits_[0] |= 0x00000002u;
}
void CurrentResourceUsage::clear_has_cpuusagerate() {
  _has_bits_[0] &= ~0x00000002u;
}
void CurrentResourceUsage::clear_cpuusagerate() {
  cpuusagerate_ = 0;
  clear_has_cpuusagerate();
}
float CurrentResourceUsage::cpuusagerate() const {
  // @@protoc_insertion_point(field_get:CurrentResourceUsage.cpuUsageRate)
  return cpuusagerate_;
}
void CurrentResourceUsage::set_cpuusagerate(float value) {
  set_has_cpuusagerate();
  cpuusagerate_ = value;
  // @@protoc_insertion_point(field_set:CurrentResourceUsage.cpuUsageRate)
}

// required float memoryUsageRate = 3;
bool CurrentResourceUsage::has_memoryusagerate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CurrentResourceUsage::set_has_memoryusagerate() {
  _has_bits_[0] |= 0x00000004u;
}
void CurrentResourceUsage::clear_has_memoryusagerate() {
  _has_bits_[0] &= ~0x00000004u;
}
void CurrentResourceUsage::clear_memoryusagerate() {
  memoryusagerate_ = 0;
  clear_has_memoryusagerate();
}
float CurrentResourceUsage::memoryusagerate() const {
  // @@protoc_insertion_point(field_get:CurrentResourceUsage.memoryUsageRate)
  return memoryusagerate_;
}
void CurrentResourceUsage::set_memoryusagerate(float value) {
  set_has_memoryusagerate();
  memoryusagerate_ = value;
  // @@protoc_insertion_point(field_set:CurrentResourceUsage.memoryUsageRate)
}

// required float harddiskUsageRate = 4;
bool CurrentResourceUsage::has_harddiskusagerate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CurrentResourceUsage::set_has_harddiskusagerate() {
  _has_bits_[0] |= 0x00000008u;
}
void CurrentResourceUsage::clear_has_harddiskusagerate() {
  _has_bits_[0] &= ~0x00000008u;
}
void CurrentResourceUsage::clear_harddiskusagerate() {
  harddiskusagerate_ = 0;
  clear_has_harddiskusagerate();
}
float CurrentResourceUsage::harddiskusagerate() const {
  // @@protoc_insertion_point(field_get:CurrentResourceUsage.harddiskUsageRate)
  return harddiskusagerate_;
}
void CurrentResourceUsage::set_harddiskusagerate(float value) {
  set_has_harddiskusagerate();
  harddiskusagerate_ = value;
  // @@protoc_insertion_point(field_set:CurrentResourceUsage.harddiskUsageRate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScadaServiceStatus::kHeadFieldNumber;
const int ScadaServiceStatus::kScadaServersStatusFieldNumber;
const int ScadaServiceStatus::kCheckTimeServerStatusFieldNumber;
const int ScadaServiceStatus::kFileDLSvrStatusFieldNumber;
const int ScadaServiceStatus::kFileDLProxyStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScadaServiceStatus::ScadaServiceStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monitor_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScadaServiceStatus)
}
ScadaServiceStatus::ScadaServiceStatus(const ScadaServiceStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::CommandHead(*from.head_);
  } else {
    head_ = NULL;
  }
  ::memcpy(&scadaserversstatus_, &from.scadaserversstatus_,
    reinterpret_cast<char*>(&filedlproxystatus_) -
    reinterpret_cast<char*>(&scadaserversstatus_) + sizeof(filedlproxystatus_));
  // @@protoc_insertion_point(copy_constructor:ScadaServiceStatus)
}

void ScadaServiceStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&head_, 0, reinterpret_cast<char*>(&filedlproxystatus_) -
    reinterpret_cast<char*>(&head_) + sizeof(filedlproxystatus_));
}

ScadaServiceStatus::~ScadaServiceStatus() {
  // @@protoc_insertion_point(destructor:ScadaServiceStatus)
  SharedDtor();
}

void ScadaServiceStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void ScadaServiceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScadaServiceStatus::descriptor() {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[3].descriptor;
}

const ScadaServiceStatus& ScadaServiceStatus::default_instance() {
  protobuf_monitor_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScadaServiceStatus* ScadaServiceStatus::New(::google::protobuf::Arena* arena) const {
  ScadaServiceStatus* n = new ScadaServiceStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScadaServiceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ScadaServiceStatus)
  if (has_head()) {
    GOOGLE_DCHECK(head_ != NULL);
    head_->::CommandHead::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&scadaserversstatus_, 0, reinterpret_cast<char*>(&filedlproxystatus_) -
      reinterpret_cast<char*>(&scadaserversstatus_) + sizeof(filedlproxystatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScadaServiceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScadaServiceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommandHead head = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ServiceStatus ScadaServersStatus = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ServiceStatus_IsValid(value)) {
            set_scadaserversstatus(static_cast< ::ServiceStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ServiceStatus CheckTimeServerStatus = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ServiceStatus_IsValid(value)) {
            set_checktimeserverstatus(static_cast< ::ServiceStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ServiceStatus FileDLSvrStatus = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ServiceStatus_IsValid(value)) {
            set_filedlsvrstatus(static_cast< ::ServiceStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ServiceStatus FileDLProxyStatus = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ServiceStatus_IsValid(value)) {
            set_filedlproxystatus(static_cast< ::ServiceStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScadaServiceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScadaServiceStatus)
  return false;
#undef DO_
}

void ScadaServiceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScadaServiceStatus)
  // required .CommandHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // required .ServiceStatus ScadaServersStatus = 2;
  if (has_scadaserversstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->scadaserversstatus(), output);
  }

  // required .ServiceStatus CheckTimeServerStatus = 3;
  if (has_checktimeserverstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->checktimeserverstatus(), output);
  }

  // required .ServiceStatus FileDLSvrStatus = 4;
  if (has_filedlsvrstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filedlsvrstatus(), output);
  }

  // required .ServiceStatus FileDLProxyStatus = 5;
  if (has_filedlproxystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->filedlproxystatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScadaServiceStatus)
}

::google::protobuf::uint8* ScadaServiceStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ScadaServiceStatus)
  // required .CommandHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // required .ServiceStatus ScadaServersStatus = 2;
  if (has_scadaserversstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->scadaserversstatus(), target);
  }

  // required .ServiceStatus CheckTimeServerStatus = 3;
  if (has_checktimeserverstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->checktimeserverstatus(), target);
  }

  // required .ServiceStatus FileDLSvrStatus = 4;
  if (has_filedlsvrstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filedlsvrstatus(), target);
  }

  // required .ServiceStatus FileDLProxyStatus = 5;
  if (has_filedlproxystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->filedlproxystatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScadaServiceStatus)
  return target;
}

size_t ScadaServiceStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ScadaServiceStatus)
  size_t total_size = 0;

  if (has_head()) {
    // required .CommandHead head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_scadaserversstatus()) {
    // required .ServiceStatus ScadaServersStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scadaserversstatus());
  }

  if (has_checktimeserverstatus()) {
    // required .ServiceStatus CheckTimeServerStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->checktimeserverstatus());
  }

  if (has_filedlsvrstatus()) {
    // required .ServiceStatus FileDLSvrStatus = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filedlsvrstatus());
  }

  if (has_filedlproxystatus()) {
    // required .ServiceStatus FileDLProxyStatus = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filedlproxystatus());
  }

  return total_size;
}
size_t ScadaServiceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScadaServiceStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .CommandHead head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required .ServiceStatus ScadaServersStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scadaserversstatus());

    // required .ServiceStatus CheckTimeServerStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->checktimeserverstatus());

    // required .ServiceStatus FileDLSvrStatus = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filedlsvrstatus());

    // required .ServiceStatus FileDLProxyStatus = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filedlproxystatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScadaServiceStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScadaServiceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ScadaServiceStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScadaServiceStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScadaServiceStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScadaServiceStatus)
    MergeFrom(*source);
  }
}

void ScadaServiceStatus::MergeFrom(const ScadaServiceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScadaServiceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_head()) {
      mutable_head()->::CommandHead::MergeFrom(from.head());
    }
    if (from.has_scadaserversstatus()) {
      set_scadaserversstatus(from.scadaserversstatus());
    }
    if (from.has_checktimeserverstatus()) {
      set_checktimeserverstatus(from.checktimeserverstatus());
    }
    if (from.has_filedlsvrstatus()) {
      set_filedlsvrstatus(from.filedlsvrstatus());
    }
    if (from.has_filedlproxystatus()) {
      set_filedlproxystatus(from.filedlproxystatus());
    }
  }
}

void ScadaServiceStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScadaServiceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScadaServiceStatus::CopyFrom(const ScadaServiceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScadaServiceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScadaServiceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void ScadaServiceStatus::Swap(ScadaServiceStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScadaServiceStatus::InternalSwap(ScadaServiceStatus* other) {
  std::swap(head_, other->head_);
  std::swap(scadaserversstatus_, other->scadaserversstatus_);
  std::swap(checktimeserverstatus_, other->checktimeserverstatus_);
  std::swap(filedlsvrstatus_, other->filedlsvrstatus_);
  std::swap(filedlproxystatus_, other->filedlproxystatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScadaServiceStatus::GetMetadata() const {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScadaServiceStatus

// required .CommandHead head = 1;
bool ScadaServiceStatus::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScadaServiceStatus::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void ScadaServiceStatus::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScadaServiceStatus::clear_head() {
  if (head_ != NULL) head_->::CommandHead::Clear();
  clear_has_head();
}
const ::CommandHead& ScadaServiceStatus::head() const {
  // @@protoc_insertion_point(field_get:ScadaServiceStatus.head)
  return head_ != NULL ? *head_
                         : *::CommandHead::internal_default_instance();
}
::CommandHead* ScadaServiceStatus::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::CommandHead;
  }
  // @@protoc_insertion_point(field_mutable:ScadaServiceStatus.head)
  return head_;
}
::CommandHead* ScadaServiceStatus::release_head() {
  // @@protoc_insertion_point(field_release:ScadaServiceStatus.head)
  clear_has_head();
  ::CommandHead* temp = head_;
  head_ = NULL;
  return temp;
}
void ScadaServiceStatus::set_allocated_head(::CommandHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:ScadaServiceStatus.head)
}

// required .ServiceStatus ScadaServersStatus = 2;
bool ScadaServiceStatus::has_scadaserversstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScadaServiceStatus::set_has_scadaserversstatus() {
  _has_bits_[0] |= 0x00000002u;
}
void ScadaServiceStatus::clear_has_scadaserversstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScadaServiceStatus::clear_scadaserversstatus() {
  scadaserversstatus_ = 0;
  clear_has_scadaserversstatus();
}
::ServiceStatus ScadaServiceStatus::scadaserversstatus() const {
  // @@protoc_insertion_point(field_get:ScadaServiceStatus.ScadaServersStatus)
  return static_cast< ::ServiceStatus >(scadaserversstatus_);
}
void ScadaServiceStatus::set_scadaserversstatus(::ServiceStatus value) {
  assert(::ServiceStatus_IsValid(value));
  set_has_scadaserversstatus();
  scadaserversstatus_ = value;
  // @@protoc_insertion_point(field_set:ScadaServiceStatus.ScadaServersStatus)
}

// required .ServiceStatus CheckTimeServerStatus = 3;
bool ScadaServiceStatus::has_checktimeserverstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScadaServiceStatus::set_has_checktimeserverstatus() {
  _has_bits_[0] |= 0x00000004u;
}
void ScadaServiceStatus::clear_has_checktimeserverstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScadaServiceStatus::clear_checktimeserverstatus() {
  checktimeserverstatus_ = 0;
  clear_has_checktimeserverstatus();
}
::ServiceStatus ScadaServiceStatus::checktimeserverstatus() const {
  // @@protoc_insertion_point(field_get:ScadaServiceStatus.CheckTimeServerStatus)
  return static_cast< ::ServiceStatus >(checktimeserverstatus_);
}
void ScadaServiceStatus::set_checktimeserverstatus(::ServiceStatus value) {
  assert(::ServiceStatus_IsValid(value));
  set_has_checktimeserverstatus();
  checktimeserverstatus_ = value;
  // @@protoc_insertion_point(field_set:ScadaServiceStatus.CheckTimeServerStatus)
}

// required .ServiceStatus FileDLSvrStatus = 4;
bool ScadaServiceStatus::has_filedlsvrstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScadaServiceStatus::set_has_filedlsvrstatus() {
  _has_bits_[0] |= 0x00000008u;
}
void ScadaServiceStatus::clear_has_filedlsvrstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScadaServiceStatus::clear_filedlsvrstatus() {
  filedlsvrstatus_ = 0;
  clear_has_filedlsvrstatus();
}
::ServiceStatus ScadaServiceStatus::filedlsvrstatus() const {
  // @@protoc_insertion_point(field_get:ScadaServiceStatus.FileDLSvrStatus)
  return static_cast< ::ServiceStatus >(filedlsvrstatus_);
}
void ScadaServiceStatus::set_filedlsvrstatus(::ServiceStatus value) {
  assert(::ServiceStatus_IsValid(value));
  set_has_filedlsvrstatus();
  filedlsvrstatus_ = value;
  // @@protoc_insertion_point(field_set:ScadaServiceStatus.FileDLSvrStatus)
}

// required .ServiceStatus FileDLProxyStatus = 5;
bool ScadaServiceStatus::has_filedlproxystatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScadaServiceStatus::set_has_filedlproxystatus() {
  _has_bits_[0] |= 0x00000010u;
}
void ScadaServiceStatus::clear_has_filedlproxystatus() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScadaServiceStatus::clear_filedlproxystatus() {
  filedlproxystatus_ = 0;
  clear_has_filedlproxystatus();
}
::ServiceStatus ScadaServiceStatus::filedlproxystatus() const {
  // @@protoc_insertion_point(field_get:ScadaServiceStatus.FileDLProxyStatus)
  return static_cast< ::ServiceStatus >(filedlproxystatus_);
}
void ScadaServiceStatus::set_filedlproxystatus(::ServiceStatus value) {
  assert(::ServiceStatus_IsValid(value));
  set_has_filedlproxystatus();
  filedlproxystatus_ = value;
  // @@protoc_insertion_point(field_set:ScadaServiceStatus.FileDLProxyStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScadaVersion::kHeadFieldNumber;
const int ScadaVersion::kScadaPlatformVerFieldNumber;
const int ScadaVersion::kScadaAppVerFieldNumber;
const int ScadaVersion::kBuildVerFieldNumber;
const int ScadaVersion::kDownloadVerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScadaVersion::ScadaVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monitor_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScadaVersion)
}
ScadaVersion::ScadaVersion(const ScadaVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scadaplatformver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scadaplatformver()) {
    scadaplatformver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scadaplatformver_);
  }
  scadaappver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scadaappver()) {
    scadaappver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scadaappver_);
  }
  buildver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buildver()) {
    buildver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buildver_);
  }
  downloadver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_downloadver()) {
    downloadver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadver_);
  }
  if (from.has_head()) {
    head_ = new ::CommandHead(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ScadaVersion)
}

void ScadaVersion::SharedCtor() {
  _cached_size_ = 0;
  scadaplatformver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scadaappver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buildver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
}

ScadaVersion::~ScadaVersion() {
  // @@protoc_insertion_point(destructor:ScadaVersion)
  SharedDtor();
}

void ScadaVersion::SharedDtor() {
  scadaplatformver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scadaappver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buildver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void ScadaVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScadaVersion::descriptor() {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[4].descriptor;
}

const ScadaVersion& ScadaVersion::default_instance() {
  protobuf_monitor_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScadaVersion* ScadaVersion::New(::google::protobuf::Arena* arena) const {
  ScadaVersion* n = new ScadaVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScadaVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:ScadaVersion)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_scadaplatformver()) {
      GOOGLE_DCHECK(!scadaplatformver_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*scadaplatformver_.UnsafeRawStringPointer())->clear();
    }
    if (has_scadaappver()) {
      GOOGLE_DCHECK(!scadaappver_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*scadaappver_.UnsafeRawStringPointer())->clear();
    }
    if (has_buildver()) {
      GOOGLE_DCHECK(!buildver_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*buildver_.UnsafeRawStringPointer())->clear();
    }
    if (has_downloadver()) {
      GOOGLE_DCHECK(!downloadver_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*downloadver_.UnsafeRawStringPointer())->clear();
    }
    if (has_head()) {
      GOOGLE_DCHECK(head_ != NULL);
      head_->::CommandHead::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScadaVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScadaVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommandHead head = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ScadaPlatformVer = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scadaplatformver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scadaplatformver().data(), this->scadaplatformver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ScadaVersion.ScadaPlatformVer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ScadaAppVer = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scadaappver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scadaappver().data(), this->scadaappver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ScadaVersion.ScadaAppVer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string BuildVer = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buildver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buildver().data(), this->buildver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ScadaVersion.BuildVer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string DownloadVer = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->downloadver().data(), this->downloadver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ScadaVersion.DownloadVer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScadaVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScadaVersion)
  return false;
#undef DO_
}

void ScadaVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScadaVersion)
  // required .CommandHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // required string ScadaPlatformVer = 2;
  if (has_scadaplatformver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scadaplatformver().data(), this->scadaplatformver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ScadaVersion.ScadaPlatformVer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scadaplatformver(), output);
  }

  // required string ScadaAppVer = 3;
  if (has_scadaappver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scadaappver().data(), this->scadaappver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ScadaVersion.ScadaAppVer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->scadaappver(), output);
  }

  // required string BuildVer = 4;
  if (has_buildver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buildver().data(), this->buildver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ScadaVersion.BuildVer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->buildver(), output);
  }

  // required string DownloadVer = 5;
  if (has_downloadver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downloadver().data(), this->downloadver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ScadaVersion.DownloadVer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->downloadver(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScadaVersion)
}

::google::protobuf::uint8* ScadaVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ScadaVersion)
  // required .CommandHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // required string ScadaPlatformVer = 2;
  if (has_scadaplatformver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scadaplatformver().data(), this->scadaplatformver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ScadaVersion.ScadaPlatformVer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scadaplatformver(), target);
  }

  // required string ScadaAppVer = 3;
  if (has_scadaappver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scadaappver().data(), this->scadaappver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ScadaVersion.ScadaAppVer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->scadaappver(), target);
  }

  // required string BuildVer = 4;
  if (has_buildver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buildver().data(), this->buildver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ScadaVersion.BuildVer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->buildver(), target);
  }

  // required string DownloadVer = 5;
  if (has_downloadver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downloadver().data(), this->downloadver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ScadaVersion.DownloadVer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->downloadver(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScadaVersion)
  return target;
}

size_t ScadaVersion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ScadaVersion)
  size_t total_size = 0;

  if (has_scadaplatformver()) {
    // required string ScadaPlatformVer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scadaplatformver());
  }

  if (has_scadaappver()) {
    // required string ScadaAppVer = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scadaappver());
  }

  if (has_buildver()) {
    // required string BuildVer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buildver());
  }

  if (has_downloadver()) {
    // required string DownloadVer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->downloadver());
  }

  if (has_head()) {
    // required .CommandHead head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  return total_size;
}
size_t ScadaVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScadaVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string ScadaPlatformVer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scadaplatformver());

    // required string ScadaAppVer = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scadaappver());

    // required string BuildVer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buildver());

    // required string DownloadVer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->downloadver());

    // required .CommandHead head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScadaVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScadaVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const ScadaVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScadaVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScadaVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScadaVersion)
    MergeFrom(*source);
  }
}

void ScadaVersion::MergeFrom(const ScadaVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScadaVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_scadaplatformver()) {
      set_has_scadaplatformver();
      scadaplatformver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scadaplatformver_);
    }
    if (from.has_scadaappver()) {
      set_has_scadaappver();
      scadaappver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scadaappver_);
    }
    if (from.has_buildver()) {
      set_has_buildver();
      buildver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buildver_);
    }
    if (from.has_downloadver()) {
      set_has_downloadver();
      downloadver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadver_);
    }
    if (from.has_head()) {
      mutable_head()->::CommandHead::MergeFrom(from.head());
    }
  }
}

void ScadaVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScadaVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScadaVersion::CopyFrom(const ScadaVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScadaVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScadaVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void ScadaVersion::Swap(ScadaVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScadaVersion::InternalSwap(ScadaVersion* other) {
  scadaplatformver_.Swap(&other->scadaplatformver_);
  scadaappver_.Swap(&other->scadaappver_);
  buildver_.Swap(&other->buildver_);
  downloadver_.Swap(&other->downloadver_);
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScadaVersion::GetMetadata() const {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScadaVersion

// required .CommandHead head = 1;
bool ScadaVersion::has_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScadaVersion::set_has_head() {
  _has_bits_[0] |= 0x00000010u;
}
void ScadaVersion::clear_has_head() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScadaVersion::clear_head() {
  if (head_ != NULL) head_->::CommandHead::Clear();
  clear_has_head();
}
const ::CommandHead& ScadaVersion::head() const {
  // @@protoc_insertion_point(field_get:ScadaVersion.head)
  return head_ != NULL ? *head_
                         : *::CommandHead::internal_default_instance();
}
::CommandHead* ScadaVersion::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::CommandHead;
  }
  // @@protoc_insertion_point(field_mutable:ScadaVersion.head)
  return head_;
}
::CommandHead* ScadaVersion::release_head() {
  // @@protoc_insertion_point(field_release:ScadaVersion.head)
  clear_has_head();
  ::CommandHead* temp = head_;
  head_ = NULL;
  return temp;
}
void ScadaVersion::set_allocated_head(::CommandHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:ScadaVersion.head)
}

// required string ScadaPlatformVer = 2;
bool ScadaVersion::has_scadaplatformver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScadaVersion::set_has_scadaplatformver() {
  _has_bits_[0] |= 0x00000001u;
}
void ScadaVersion::clear_has_scadaplatformver() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScadaVersion::clear_scadaplatformver() {
  scadaplatformver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scadaplatformver();
}
const ::std::string& ScadaVersion::scadaplatformver() const {
  // @@protoc_insertion_point(field_get:ScadaVersion.ScadaPlatformVer)
  return scadaplatformver_.GetNoArena();
}
void ScadaVersion::set_scadaplatformver(const ::std::string& value) {
  set_has_scadaplatformver();
  scadaplatformver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScadaVersion.ScadaPlatformVer)
}
#if LANG_CXX11
void ScadaVersion::set_scadaplatformver(::std::string&& value) {
  set_has_scadaplatformver();
  scadaplatformver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScadaVersion.ScadaPlatformVer)
}
#endif
void ScadaVersion::set_scadaplatformver(const char* value) {
  set_has_scadaplatformver();
  scadaplatformver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScadaVersion.ScadaPlatformVer)
}
void ScadaVersion::set_scadaplatformver(const char* value, size_t size) {
  set_has_scadaplatformver();
  scadaplatformver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScadaVersion.ScadaPlatformVer)
}
::std::string* ScadaVersion::mutable_scadaplatformver() {
  set_has_scadaplatformver();
  // @@protoc_insertion_point(field_mutable:ScadaVersion.ScadaPlatformVer)
  return scadaplatformver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScadaVersion::release_scadaplatformver() {
  // @@protoc_insertion_point(field_release:ScadaVersion.ScadaPlatformVer)
  clear_has_scadaplatformver();
  return scadaplatformver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScadaVersion::set_allocated_scadaplatformver(::std::string* scadaplatformver) {
  if (scadaplatformver != NULL) {
    set_has_scadaplatformver();
  } else {
    clear_has_scadaplatformver();
  }
  scadaplatformver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scadaplatformver);
  // @@protoc_insertion_point(field_set_allocated:ScadaVersion.ScadaPlatformVer)
}

// required string ScadaAppVer = 3;
bool ScadaVersion::has_scadaappver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScadaVersion::set_has_scadaappver() {
  _has_bits_[0] |= 0x00000002u;
}
void ScadaVersion::clear_has_scadaappver() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScadaVersion::clear_scadaappver() {
  scadaappver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scadaappver();
}
const ::std::string& ScadaVersion::scadaappver() const {
  // @@protoc_insertion_point(field_get:ScadaVersion.ScadaAppVer)
  return scadaappver_.GetNoArena();
}
void ScadaVersion::set_scadaappver(const ::std::string& value) {
  set_has_scadaappver();
  scadaappver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScadaVersion.ScadaAppVer)
}
#if LANG_CXX11
void ScadaVersion::set_scadaappver(::std::string&& value) {
  set_has_scadaappver();
  scadaappver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScadaVersion.ScadaAppVer)
}
#endif
void ScadaVersion::set_scadaappver(const char* value) {
  set_has_scadaappver();
  scadaappver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScadaVersion.ScadaAppVer)
}
void ScadaVersion::set_scadaappver(const char* value, size_t size) {
  set_has_scadaappver();
  scadaappver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScadaVersion.ScadaAppVer)
}
::std::string* ScadaVersion::mutable_scadaappver() {
  set_has_scadaappver();
  // @@protoc_insertion_point(field_mutable:ScadaVersion.ScadaAppVer)
  return scadaappver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScadaVersion::release_scadaappver() {
  // @@protoc_insertion_point(field_release:ScadaVersion.ScadaAppVer)
  clear_has_scadaappver();
  return scadaappver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScadaVersion::set_allocated_scadaappver(::std::string* scadaappver) {
  if (scadaappver != NULL) {
    set_has_scadaappver();
  } else {
    clear_has_scadaappver();
  }
  scadaappver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scadaappver);
  // @@protoc_insertion_point(field_set_allocated:ScadaVersion.ScadaAppVer)
}

// required string BuildVer = 4;
bool ScadaVersion::has_buildver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScadaVersion::set_has_buildver() {
  _has_bits_[0] |= 0x00000004u;
}
void ScadaVersion::clear_has_buildver() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScadaVersion::clear_buildver() {
  buildver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buildver();
}
const ::std::string& ScadaVersion::buildver() const {
  // @@protoc_insertion_point(field_get:ScadaVersion.BuildVer)
  return buildver_.GetNoArena();
}
void ScadaVersion::set_buildver(const ::std::string& value) {
  set_has_buildver();
  buildver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScadaVersion.BuildVer)
}
#if LANG_CXX11
void ScadaVersion::set_buildver(::std::string&& value) {
  set_has_buildver();
  buildver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScadaVersion.BuildVer)
}
#endif
void ScadaVersion::set_buildver(const char* value) {
  set_has_buildver();
  buildver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScadaVersion.BuildVer)
}
void ScadaVersion::set_buildver(const char* value, size_t size) {
  set_has_buildver();
  buildver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScadaVersion.BuildVer)
}
::std::string* ScadaVersion::mutable_buildver() {
  set_has_buildver();
  // @@protoc_insertion_point(field_mutable:ScadaVersion.BuildVer)
  return buildver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScadaVersion::release_buildver() {
  // @@protoc_insertion_point(field_release:ScadaVersion.BuildVer)
  clear_has_buildver();
  return buildver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScadaVersion::set_allocated_buildver(::std::string* buildver) {
  if (buildver != NULL) {
    set_has_buildver();
  } else {
    clear_has_buildver();
  }
  buildver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buildver);
  // @@protoc_insertion_point(field_set_allocated:ScadaVersion.BuildVer)
}

// required string DownloadVer = 5;
bool ScadaVersion::has_downloadver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScadaVersion::set_has_downloadver() {
  _has_bits_[0] |= 0x00000008u;
}
void ScadaVersion::clear_has_downloadver() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScadaVersion::clear_downloadver() {
  downloadver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_downloadver();
}
const ::std::string& ScadaVersion::downloadver() const {
  // @@protoc_insertion_point(field_get:ScadaVersion.DownloadVer)
  return downloadver_.GetNoArena();
}
void ScadaVersion::set_downloadver(const ::std::string& value) {
  set_has_downloadver();
  downloadver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScadaVersion.DownloadVer)
}
#if LANG_CXX11
void ScadaVersion::set_downloadver(::std::string&& value) {
  set_has_downloadver();
  downloadver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScadaVersion.DownloadVer)
}
#endif
void ScadaVersion::set_downloadver(const char* value) {
  set_has_downloadver();
  downloadver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScadaVersion.DownloadVer)
}
void ScadaVersion::set_downloadver(const char* value, size_t size) {
  set_has_downloadver();
  downloadver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScadaVersion.DownloadVer)
}
::std::string* ScadaVersion::mutable_downloadver() {
  set_has_downloadver();
  // @@protoc_insertion_point(field_mutable:ScadaVersion.DownloadVer)
  return downloadver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScadaVersion::release_downloadver() {
  // @@protoc_insertion_point(field_release:ScadaVersion.DownloadVer)
  clear_has_downloadver();
  return downloadver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScadaVersion::set_allocated_downloadver(::std::string* downloadver) {
  if (downloadver != NULL) {
    set_has_downloadver();
  } else {
    clear_has_downloadver();
  }
  downloadver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downloadver);
  // @@protoc_insertion_point(field_set_allocated:ScadaVersion.DownloadVer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncFileInfo::kFileNameFieldNumber;
const int SyncFileInfo::kTargetPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncFileInfo::SyncFileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monitor_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncFileInfo)
}
SyncFileInfo::SyncFileInfo(const SyncFileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  targetpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetpath()) {
    targetpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpath_);
  }
  // @@protoc_insertion_point(copy_constructor:SyncFileInfo)
}

void SyncFileInfo::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SyncFileInfo::~SyncFileInfo() {
  // @@protoc_insertion_point(destructor:SyncFileInfo)
  SharedDtor();
}

void SyncFileInfo::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SyncFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncFileInfo::descriptor() {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[5].descriptor;
}

const SyncFileInfo& SyncFileInfo::default_instance() {
  protobuf_monitor_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncFileInfo* SyncFileInfo::New(::google::protobuf::Arena* arena) const {
  SyncFileInfo* n = new SyncFileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncFileInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_targetpath()) {
      GOOGLE_DCHECK(!targetpath_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*targetpath_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncFileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FileName = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SyncFileInfo.FileName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string TargetPath = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetpath().data(), this->targetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SyncFileInfo.TargetPath");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncFileInfo)
  return false;
#undef DO_
}

void SyncFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncFileInfo)
  // required string FileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SyncFileInfo.FileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required string TargetPath = 2;
  if (has_targetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetpath().data(), this->targetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SyncFileInfo.TargetPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->targetpath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncFileInfo)
}

::google::protobuf::uint8* SyncFileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SyncFileInfo)
  // required string FileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SyncFileInfo.FileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // required string TargetPath = 2;
  if (has_targetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetpath().data(), this->targetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SyncFileInfo.TargetPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->targetpath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncFileInfo)
  return target;
}

size_t SyncFileInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SyncFileInfo)
  size_t total_size = 0;

  if (has_filename()) {
    // required string FileName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  if (has_targetpath()) {
    // required string TargetPath = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetpath());
  }

  return total_size;
}
size_t SyncFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncFileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string FileName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());

    // required string TargetPath = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetpath());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncFileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncFileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncFileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncFileInfo)
    MergeFrom(*source);
  }
}

void SyncFileInfo::MergeFrom(const SyncFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (from.has_targetpath()) {
      set_has_targetpath();
      targetpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpath_);
    }
  }
}

void SyncFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncFileInfo::CopyFrom(const SyncFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SyncFileInfo::Swap(SyncFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncFileInfo::InternalSwap(SyncFileInfo* other) {
  filename_.Swap(&other->filename_);
  targetpath_.Swap(&other->targetpath_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncFileInfo::GetMetadata() const {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncFileInfo

// required string FileName = 1;
bool SyncFileInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncFileInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncFileInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncFileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& SyncFileInfo::filename() const {
  // @@protoc_insertion_point(field_get:SyncFileInfo.FileName)
  return filename_.GetNoArena();
}
void SyncFileInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SyncFileInfo.FileName)
}
#if LANG_CXX11
void SyncFileInfo::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncFileInfo.FileName)
}
#endif
void SyncFileInfo::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncFileInfo.FileName)
}
void SyncFileInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncFileInfo.FileName)
}
::std::string* SyncFileInfo::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:SyncFileInfo.FileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncFileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:SyncFileInfo.FileName)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncFileInfo::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:SyncFileInfo.FileName)
}

// required string TargetPath = 2;
bool SyncFileInfo::has_targetpath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncFileInfo::set_has_targetpath() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncFileInfo::clear_has_targetpath() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncFileInfo::clear_targetpath() {
  targetpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpath();
}
const ::std::string& SyncFileInfo::targetpath() const {
  // @@protoc_insertion_point(field_get:SyncFileInfo.TargetPath)
  return targetpath_.GetNoArena();
}
void SyncFileInfo::set_targetpath(const ::std::string& value) {
  set_has_targetpath();
  targetpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SyncFileInfo.TargetPath)
}
#if LANG_CXX11
void SyncFileInfo::set_targetpath(::std::string&& value) {
  set_has_targetpath();
  targetpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncFileInfo.TargetPath)
}
#endif
void SyncFileInfo::set_targetpath(const char* value) {
  set_has_targetpath();
  targetpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncFileInfo.TargetPath)
}
void SyncFileInfo::set_targetpath(const char* value, size_t size) {
  set_has_targetpath();
  targetpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncFileInfo.TargetPath)
}
::std::string* SyncFileInfo::mutable_targetpath() {
  set_has_targetpath();
  // @@protoc_insertion_point(field_mutable:SyncFileInfo.TargetPath)
  return targetpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncFileInfo::release_targetpath() {
  // @@protoc_insertion_point(field_release:SyncFileInfo.TargetPath)
  clear_has_targetpath();
  return targetpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncFileInfo::set_allocated_targetpath(::std::string* targetpath) {
  if (targetpath != NULL) {
    set_has_targetpath();
  } else {
    clear_has_targetpath();
  }
  targetpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpath);
  // @@protoc_insertion_point(field_set_allocated:SyncFileInfo.TargetPath)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncFileInfoList::kHeadFieldNumber;
const int SyncFileInfoList::kSyncListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncFileInfoList::SyncFileInfoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monitor_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncFileInfoList)
}
SyncFileInfoList::SyncFileInfoList(const SyncFileInfoList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      synclist_(from.synclist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::CommandHead(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SyncFileInfoList)
}

void SyncFileInfoList::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
}

SyncFileInfoList::~SyncFileInfoList() {
  // @@protoc_insertion_point(destructor:SyncFileInfoList)
  SharedDtor();
}

void SyncFileInfoList::SharedDtor() {
  if (this != internal_default_instance()) {
    delete head_;
  }
}

void SyncFileInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncFileInfoList::descriptor() {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[6].descriptor;
}

const SyncFileInfoList& SyncFileInfoList::default_instance() {
  protobuf_monitor_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncFileInfoList* SyncFileInfoList::New(::google::protobuf::Arena* arena) const {
  SyncFileInfoList* n = new SyncFileInfoList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncFileInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncFileInfoList)
  synclist_.Clear();
  if (has_head()) {
    GOOGLE_DCHECK(head_ != NULL);
    head_->::CommandHead::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncFileInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncFileInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommandHead head = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SyncFileInfo syncList = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_synclist()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncFileInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncFileInfoList)
  return false;
#undef DO_
}

void SyncFileInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncFileInfoList)
  // required .CommandHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // repeated .SyncFileInfo syncList = 2;
  for (unsigned int i = 0, n = this->synclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->synclist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncFileInfoList)
}

::google::protobuf::uint8* SyncFileInfoList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SyncFileInfoList)
  // required .CommandHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // repeated .SyncFileInfo syncList = 2;
  for (unsigned int i = 0, n = this->synclist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->synclist(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncFileInfoList)
  return target;
}

size_t SyncFileInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncFileInfoList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .CommandHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // repeated .SyncFileInfo syncList = 2;
  {
    unsigned int count = this->synclist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->synclist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncFileInfoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncFileInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncFileInfoList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncFileInfoList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncFileInfoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncFileInfoList)
    MergeFrom(*source);
  }
}

void SyncFileInfoList::MergeFrom(const SyncFileInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncFileInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  synclist_.MergeFrom(from.synclist_);
  if (from.has_head()) {
    mutable_head()->::CommandHead::MergeFrom(from.head());
  }
}

void SyncFileInfoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncFileInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncFileInfoList::CopyFrom(const SyncFileInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncFileInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncFileInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->synclist())) return false;
  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void SyncFileInfoList::Swap(SyncFileInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncFileInfoList::InternalSwap(SyncFileInfoList* other) {
  synclist_.UnsafeArenaSwap(&other->synclist_);
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncFileInfoList::GetMetadata() const {
  protobuf_monitor_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monitor_5fmessage_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncFileInfoList

// required .CommandHead head = 1;
bool SyncFileInfoList::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncFileInfoList::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncFileInfoList::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncFileInfoList::clear_head() {
  if (head_ != NULL) head_->::CommandHead::Clear();
  clear_has_head();
}
const ::CommandHead& SyncFileInfoList::head() const {
  // @@protoc_insertion_point(field_get:SyncFileInfoList.head)
  return head_ != NULL ? *head_
                         : *::CommandHead::internal_default_instance();
}
::CommandHead* SyncFileInfoList::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::CommandHead;
  }
  // @@protoc_insertion_point(field_mutable:SyncFileInfoList.head)
  return head_;
}
::CommandHead* SyncFileInfoList::release_head() {
  // @@protoc_insertion_point(field_release:SyncFileInfoList.head)
  clear_has_head();
  ::CommandHead* temp = head_;
  head_ = NULL;
  return temp;
}
void SyncFileInfoList::set_allocated_head(::CommandHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:SyncFileInfoList.head)
}

// repeated .SyncFileInfo syncList = 2;
int SyncFileInfoList::synclist_size() const {
  return synclist_.size();
}
void SyncFileInfoList::clear_synclist() {
  synclist_.Clear();
}
const ::SyncFileInfo& SyncFileInfoList::synclist(int index) const {
  // @@protoc_insertion_point(field_get:SyncFileInfoList.syncList)
  return synclist_.Get(index);
}
::SyncFileInfo* SyncFileInfoList::mutable_synclist(int index) {
  // @@protoc_insertion_point(field_mutable:SyncFileInfoList.syncList)
  return synclist_.Mutable(index);
}
::SyncFileInfo* SyncFileInfoList::add_synclist() {
  // @@protoc_insertion_point(field_add:SyncFileInfoList.syncList)
  return synclist_.Add();
}
::google::protobuf::RepeatedPtrField< ::SyncFileInfo >*
SyncFileInfoList::mutable_synclist() {
  // @@protoc_insertion_point(field_mutable_list:SyncFileInfoList.syncList)
  return &synclist_;
}
const ::google::protobuf::RepeatedPtrField< ::SyncFileInfo >&
SyncFileInfoList::synclist() const {
  // @@protoc_insertion_point(field_list:SyncFileInfoList.syncList)
  return synclist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
